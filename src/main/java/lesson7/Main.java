package lesson7;

import com.google.gson.Gson;
import lesson6.Person;

import java.io.*;
import java.nio.Buffer;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {
    static void exceptions() {
        // –ò—Å–∫–ª—é—á–µ–Ω–∏—è - –æ—Å–æ–±–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ JVM
//        System.out.println(5 / 0);
//        int[] arr = new int[0];
//        System.out.println(arr[0]);
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        if (b != 0) {
            System.out.println("–ß–∞—Å—Ç–Ω–æ–µ a –∏ b = " + (a / b));
        } else {
            System.out.println("–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ 0");
        }
    }

    static void tryCatch() {
        Scanner sc = new Scanner(System.in);
        try {
            int a = sc.nextInt();
            int b = sc.nextInt();
            System.out.println("–ß–∞—Å—Ç–Ω–æ–µ a –∏ b = " + (a / b));
        } catch (InputMismatchException ex) {
            System.out.println("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ");
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        } catch (ArithmeticException ex) {
            System.out.println("–í—ã –≤–≤–µ–ª–∏ –≤—Ç–æ—Ä—ã–º —á–∏—Å–ª–æ–º 0, –Ω–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è");
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        } catch (Exception ex) {
            System.out.println("–ö–∞–∫–æ–µ-—Ç–æ –¥—Ä—É–≥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ");
        } finally {
            System.out.println("–ö–æ–Ω–µ—Ü try..catch");
            sc.close();
        }
    }

    static void typesOfExceptions() {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        try {
            FileReader in = new FileReader("123");
        } catch (FileNotFoundException | ArithmeticException exception) {
            System.out.println(exception.getMessage());
        }
        // –ù–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        System.out.println(5 / 0);
    }


    static void throwsKeyword() throws FileNotFoundException {
        // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ throws —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç "–±—Ä–æ—Å–∏—Ç—å" –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        FileReader in = new FileReader("123");
    }

    static void newExceptionsAndThrow() throws InputNotPositiveException {
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        if (i <= 0) {
            throw new InputNotPositiveException(); // "–±—Ä–æ—Å–∞–Ω–∏–µ" –Ω–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ jvm
        }
        System.out.println(i);
    }

    // 1. –°–æ–∑–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NameTooLongException, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–º (–Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Exception)
    // –í–Ω—É—Ç—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤,
    // –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Exception (—á–µ—Ä–µ–∑ super) —Å–æ —Å—Ç—Ä–æ–∫–æ–π "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
    // 2. –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ static String readName() throws NameTooLongException,
    // –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç Scanner –∏ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ nextLine())
    // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ >100, "–±—Ä–æ—Å–∏—Ç—å" –∏—Å–∫–ª—é—á–µ–Ω–∏–µ NameTooLongException
    // –í —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏, –≤–µ—Ä–Ω—É—Ç—å –∏–º—è
    // 3. –í psvm –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ readName() –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é try..catch
    // –í —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    static void task1() {
        try {
            String name = readName();
            System.out.println("–ü—Ä–∏–≤–µ—Ç, " + name);
        } catch (NameTooLongException ex) {
            System.out.println(ex.getMessage());
        }
    }

    static String readName() throws NameTooLongException {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        if (s.length() > 10) {
            throw new NameTooLongException();
        }
        return s;
    }

    static void byteStreamsRead() {
        // –ü–æ—Ç–æ–∫–∏ –±–∞–π—Ç
        try {
            FileInputStream in = new FileInputStream("test.txt");
            // r
            System.out.println("r");
            System.out.println(Integer.toHexString(in.read()));
            // —ã
            System.out.println("—ã");
            System.out.println(Integer.toHexString(in.read()));
            System.out.println(Integer.toHexString(in.read()));
            // ÂõΩ
            System.out.println("ÂõΩ");
            System.out.println(Integer.toHexString(in.read()));
            System.out.println(Integer.toHexString(in.read()));
            System.out.println(Integer.toHexString(in.read()));
            // üòÄ
            System.out.println("\uD83D\uDE00");
            System.out.println(Integer.toHexString(in.read()));
            System.out.println(Integer.toHexString(in.read()));
            System.out.println(Integer.toHexString(in.read()));
            System.out.println(Integer.toHexString(in.read()));
            // –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            System.out.println("–ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞: ");
            int end = in.read();
            System.out.println(Integer.toHexString(end) + " " + end);
            System.out.println(in.read());

            in.close();
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∞: " + ex.getMessage());
        }
    }

    static void byteStreamsCopy() {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream("logo.svg");
            out = new FileOutputStream("logo_copy.svg");
            // –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            int i = in.read();
            while (i != -1) {
                out.write(i);
                i = in.read();
            }
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∞: " + ex.getMessage());
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    static void tryWithResources() {
        try (FileInputStream in = new FileInputStream("test.txt");
            FileOutputStream out = new FileOutputStream("test_copy.txt")) {
            int i = in.read();
            while (i != -1) {
                out.write(i);
                i = in.read();
            }
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∞: " + ex.getMessage());
        }
    }

    static void charStreams() {
        try (FileReader in = new FileReader("test1.txt");
            FileWriter out = new FileWriter("test1_copy.txt")) {
            int i = in.read();
            while (i != -1) {
                char c = (char) i;
                System.out.println("–°–∏–º–≤–æ–ª: " + c);
                if (c < '–∞' || c > '—è') {
                    out.write(i);
                }
                i = in.read();
            }
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∞: " + ex.getMessage());
        }
    }

    static void bufferedStreams() {
        // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
        try (BufferedReader in =  new BufferedReader(new FileReader("test1.txt"));
             BufferedWriter out = new BufferedWriter(new FileWriter("test1_copy.txt"))) {
            int i = in.read();
            while (i != -1) {
                char c = (char) i;
                System.out.println("–°–∏–º–≤–æ–ª: " + c);
                if (c < '–∞' || c > '—è') {
                    out.write(i);
                }
                i = in.read();
            }
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∞: " + ex.getMessage());
        }

        // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –±–∞–π—Ç
        try (BufferedInputStream in = new BufferedInputStream(new FileInputStream("test1.txt"));
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream("test1_copy.txt"))) {
            int i = in.read();
            while (i != -1) {
                out.write(i);
                i = in.read();
            }
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∞: " + ex.getMessage());
        }
    }

    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –Ω–∞–±–æ—Ä –±–∞–π—Ç/—Å–∏–º–≤–æ–ª–æ–≤
    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ –±–∞–π—Ç/—Å–∏–º–≤–æ–ª–æ–≤
    static void objectStreams() {
        Person p = new Person("Andrew", 23);
        p.password="passw0rd";
        p.count = 2;
        try (ObjectOutputStream outObj = new ObjectOutputStream(new FileOutputStream("person"))) {
            outObj.writeObject(p);
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ IO");
        }
        Person p2 = null;
        try (ObjectInputStream inObj = new ObjectInputStream(new FileInputStream("person"))) {
            p2 = (Person) inObj.readObject();
        } catch (IOException ex) {
            System.out.println("–û—à–∏–±–∫–∞ IO");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        System.out.println(p);
        System.out.println(p2);
        System.out.println(p == p2);
        System.out.println(p.hashCode());
        System.out.println(p2.hashCode());

        System.out.println(p2.count);
        System.out.println(p2.password);
    }

    static void jsonGson() {

        // Serialization
//        System.out.println(gson.toJson(1));            // ==> 1
//        System.out.println(gson.toJson("abcd"));       // ==> "abcd"
//        System.out.println(gson.toJson(10L)); // ==> 10
//        System.out.println(gson.toJson(1.25)); // ==> 1.25
        int[] values = { 1 };
//        System.out.println(gson.toJson(values));       // ==> [1]
//        System.out.println(gson.toJson(null)); // ==> null

// Deserialization
//        int one = gson.fromJson("1", int.class);
//        Integer oneInt = gson.fromJson("1", Integer.class);
//        Long oneLong = gson.fromJson("1", Long.class);
//        Boolean falseBool = gson.fromJson("false", Boolean.class);
//        String str = gson.fromJson("\"abc\"", String.class);
//        String[] anotherStr = gson.fromJson("[\"abc\"]", String[].class);
//        System.out.println(one);
//        System.out.println(oneInt);
//        System.out.println(oneLong);
//        System.out.println(falseBool);
//        System.out.println(str);
//        System.out.println(Arrays.toString(anotherStr));

        Gson gson = new Gson();
        Person p = new Person("Andrew", 23);
        p.password="passw0rd";
        p.count = 2;
        String pJson = gson.toJson(p);
        System.out.println(pJson);


        Person p2 = gson.fromJson(pJson, Person.class);
        System.out.println(p2);
        System.out.println(p);
        System.out.println(p == p2);

        Human john = null;
        try (FileReader johnJson = new FileReader("john.json")){
            john = gson.fromJson(johnJson, Human.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(john);
        System.out.println(john.getCity());
    }

    static void maven() {

    }

    // –î–æ–±–∞–≤–∏—Ç—å gson –≤ –ø—Ä–æ–µ–∫—Ç (–∏–ª–∏ –≤—Ä—É—á–Ω—É—é, –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ maven)
    // –û–±—ä–µ–∫—Ç –ª—é–±–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ json —Å –ø–æ–º–æ—â—å—é toJson()
    static void task2() {

    }

    public static void main(String[] args) throws FileNotFoundException {
        // –ò—Å–∫–ª—é—á–µ–Ω–∏—è
//        exceptions();
        // –ë–ª–æ–∫ try..catch
//        tryCatch();
//        typesOfExceptions();
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ throws
//        throwsKeyword();
        // –°–≤–æ–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
//        newExceptionsAndThrow();
//        task1();
        // –ü–æ—Ç–æ–∫–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ (I/O streams)
        // –ü–æ—Ç–æ–∫–∏ –±–∞–π—Ç
//        byteStreamsRead();
//        byteStreamsCopy();
        // try-with-resources
//        tryWithResources();
        // –ü–æ—Ç–æ–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
//        charStreams();
        // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
//        bufferedStreams();
        // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        // –ü–æ—Ç–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
//        objectStreams();
        // json, Gson
        jsonGson();
        // Maven
        maven();
    }
}
